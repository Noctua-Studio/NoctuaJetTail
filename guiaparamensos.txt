Proyecto ==================================================================

Podemos agregar Jetstream a un nuevo proyecto o integralo a uno existente

Para agregarlo desde el inicio ejecutamos
    laravel new "nombre" --jet

Debemos tener node js instalado
ejecutamos comandos
    npm install
    npm run dev 

Crear la base de datos y definirla en el archivo .env

Ejecutamos las migraciones  
    php artisan migrate:fresh --seed

Creamos el WebController para administrar las rutas de la página
    php artisan make:controller WebController

Creamos la carpeta web en resources/views y dentro archivo blade index que será la página principal a partir de ahora

Agregamos el primer método al web controller
    public function index()
    {
        return view('web/index');
    }

Agregamos la ruta del index en el archivo web de rutas
    Route::get('/', [WebController::class,'index'])->name('index');

Usamos el layout de guest para la página pública


==============LANG==============
Los locales deben de ser modificados en 2 archivos de config translatable.php y localized-routes.php
Migraciones, el comando también crea los modelos
php artisan make:migration <Migración base> -m
php artisan make:migration <Migración>-translations -m

la migración base no lleva campos extras
    id
    <campos>
    timestamps
la -translations lleva las siguientes líneas
    id
    *$table->foreignId('<modelo base>_id')->constrained();
    *$table->string('locale')->index();

    <campos a traducir>(Nombre de imagen no se traduce y no se pone)

    *$table->unique(['<modelo base>_id','locale']);

Pasando a los modelos
En el modelo base
--Definiendo la clase 
    implements TranslatableContract
--dentro de la clase
    use HasFactory, Translatable;

    protected $fillable = [<campos que no se traducen>];
    public $translatedAttributes = [<Campos a traducir>];

En el translations
    use HasFactory;
    public $timestamps = false;
    protected $fillable = [<Campos que se traducen>]; (debe coincidir con el otro modelo $translatedAttributes)

Dentro de los forms 
Se crean nuevos campos, como ya se tienen los componentes es agregar un foreach de los locales foreach(config('translatable.locales') as $locale)
y dentro de la parte de name para recopilar los datos
    name="<Nombre del campo>:{{ $locale }}"

Dentro del request ej
    public function rules(){
        $rules = [
            'es.title' => 'required'
        ];
        foreach(config('translatable.locales') as $locale){
            $rules[$locale . '.title']= 'string';
        }
        return $rules;
    }

Para crear los archivos de modelo, migración, controller y requests el siguiente comando
php artisan make:model {{model}} -crRm